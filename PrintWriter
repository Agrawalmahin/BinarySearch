package codeforce;

import java.io.*;

import java.math.*;
import java.util.*;

public class problemA {
	public static HashMap<Long, ArrayList<Long>> hMap;
	public static ArrayList<Long> arrayList;

	public static class InputReader {
		private final InputStream stream;
		private final byte[] buf = new byte[8192];
		private int curChar, snumChars;

		public InputReader(InputStream st) {
			this.stream = st;
		}

		public int read() {
			if (snumChars == -1)
				throw new InputMismatchException();
			if (curChar >= snumChars) {
				curChar = 0;
				try {
					snumChars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (snumChars <= 0)
					return -1;
			}
			return buf[curChar++];
		}

		public int nextInt() {
			int c = read();
			while (isSpaceChar(c)) {
				c = read();
			}
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = read();
			}
			int res = 0;
			do {
				res *= 10;
				res += c - '0';
				c = read();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public long nextLong() {
			int c = read();
			while (isSpaceChar(c)) {
				c = read();
			}
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = read();
			}
			long res = 0;
			do {
				res *= 10;
				res += c - '0';
				c = read();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public int[] nextIntArray(int n) {
			int a[] = new int[n];
			for (int i = 0; i < n; i++) {
				a[i] = nextInt();
			}
			return a;
		}

		public String readString() {
			int c = read();
			while (isSpaceChar(c)) {
				c = read();
			}
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isSpaceChar(c));
			return res.toString();
		}

		public String nextLine() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isEndOfLine(c));
			return res.toString();
		}

		public boolean isSpaceChar(int c) {
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}

		private boolean isEndOfLine(int c) {
			return c == '\n' || c == '\r' || c == -1;
		}
	}

	public static long sum(ArrayList<Long> arrp, long n) {
		long Sum = 0;
		for (long i = n - 1; i >= 0; i--) {
			Sum += (i * arrp.get((int) i)) - ((n - 1 - i) * arrp.get((int) i));
		}
		return Sum;
	}

	public static void main(String[] args) throws IOException {
		InputReader in = new InputReader(System.in);
		PrintWriter out = new PrintWriter(System.out);
		int t = in.nextInt();
		for(int x=0;x<t;x++) {
			int n = in.nextInt();
			int m = in.nextInt();
			int k = in.nextInt();
			int arr[] = new int[n];
			for(int i=0;i<n;i++) {
				arr[i] = in.nextInt();
			}
			if(n == 1)out.println("YES");
			else {
				int g=0;
				for(int i=0;i<n-1;i++) {
					
					if(arr[i]>=arr[i+1]) {
						m+=arr[i]-arr[i+1];
						int add1 = arr[i+1]-k;
						int add2 = Math.max(0, add1);
						int add3 = arr[i+1]-add2;
						int add4 = Math.max(0, add3);
						m+=add4;
					}
					else {
						int diff = Math.abs(arr[i]-arr[i+1]);
						if(diff<=k) {
							int op =Math.max(0, arr[i+1]-k);
							int gx = arr[i]-op;
							m+=gx;
						}
						else {
							int o = diff-k;
							if(m>=o)m-=o;
							else {
								g=1;
								out.println("NO");
								break;
							}
						}
					}
				}
				if(g == 0)out.println("YES");
			}
			out.flush();
		}
		
	}
}

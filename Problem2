package codeforce;
import java.util.*;
import java.math.*;
import java.io.*;

 class problem2 {
	public static int val(char c) {
		if (c >= '0' && c <= '9')
			return (int) c - '0';
		else
			return (int) c - 'A' + 10;
	}

	// Function to convert a
	// number from given base
	// 'b' to decimal
	public static long toDeci(String str, int base) {
		int len = str.length();
		long power = 1; // Initialize
						// power of base
		long num = 0; // Initialize result
		int i;

		// Decimal equivalent is
		// str[len-1]*1 + str[len-1] *
		// base + str[len-1]*(base^2) + ...
		for (i = len - 1; i >= 0; i--) {
			// A digit in input number
			// must be less than
			// number's base
			if (val(str.charAt(i)) >= base) {
				return -1;
			}

			num += val(str.charAt(i)) * power;
			power = power * base;
			if (num > 1000000000000l || power>1000000000000l)
				return (-1);
		}

		return num;
	}

	public static class InputReader {
		private final InputStream stream;
		private final byte[] buf = new byte[8192];
		private int curChar, snumChars;

		public InputReader(InputStream st) {
			this.stream = st;
		}

		public int read() {
			if (snumChars == -1)
				throw new InputMismatchException();
			if (curChar >= snumChars) {
				curChar = 0;
				try {
					snumChars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (snumChars <= 0)
					return -1;
			}
			return buf[curChar++];
		}

		public int nextInt() {
			int c = read();
			while (isSpaceChar(c)) {
				c = read();
			}
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = read();
			}
			int res = 0;
			do {
				res *= 10;
				res += c - '0';
				c = read();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public long nextLong() {
			int c = read();
			while (isSpaceChar(c)) {
				c = read();
			}
			int sgn = 1;
			if (c == '-') {
				sgn = -1;
				c = read();
			}
			long res = 0;
			do {
				res *= 10;
				res += c - '0';
				c = read();
			} while (!isSpaceChar(c));
			return res * sgn;
		}

		public int[] nextIntArray(int n) {
			int a[] = new int[n];
			for (int i = 0; i < n; i++) {
				a[i] = nextInt();
			}
			return a;
		}

		public String readString() {
			int c = read();
			while (isSpaceChar(c)) {
				c = read();
			}
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isSpaceChar(c));
			return res.toString();
		}

		public String nextLine() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isEndOfLine(c));
			return res.toString();
		}

		public boolean isSpaceChar(int c) {
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}

		private boolean isEndOfLine(int c) {
			return c == '\n' || c == '\r' || c == -1;
		}
	}

	public static long sum(ArrayList<Long> arrp, long n) {
		long Sum = 0;
		for (long i = n - 1; i >= 0; i--) {
			Sum += (i * arrp.get((int) i)) - ((n - 1 - i) * arrp.get((int) i));
		}
		return Sum;
	}

	public static void main(String[] args) throws IOException {
		InputReader in = new InputReader(System.in);
		int t = in.nextInt();
		for (int j = 0; j < t; j++) {
			int n = in.nextInt();
			long arr[][] = new long[n][35];
			long ans = -1;
			for (int k = 0; k < n; k++) {
				int base = in.nextInt();
				String val = in.nextLine();
				if (base<0)continue ;
					ans = toDeci(val, base);
			}
			long c = 1000000000000l;
			if (ans >=-1) {
					System.out.println(ans);
			}
		}
	}
}
